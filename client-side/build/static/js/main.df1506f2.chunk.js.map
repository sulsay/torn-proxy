{"version":3,"sources":["ProxyKey.module.scss","ProxyKeys.module.scss","Faq.module.scss","App.module.scss","TornKeyForm.module.scss","AppContext.ts","TornKeyForm.tsx","hooks/useConversion.ts","ProxyKey.tsx","ProxyKeys.tsx","Faq.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppContext","React","createContext","serverBaseUrl","user","displayName","TornKeyForm","onAuthenticated","app","useContext","useState","tornKey","setTornKey","checking","setChecking","lastCheckWasError","setLastCheckWasError","submit","event","a","preventDefault","fetch","credentials","method","headers","body","JSON","stringify","key","response","status","json","id","name","onSubmit","className","styles","wrongKey","type","value","onChange","target","disabled","convertKeyRecordToEntity","record","userId","user_id","permissions","description","createdAt","Date","created_at","revokedAt","revoked_at","ProxyKey","keyEntity","useAltStyle","onKeyUpdated","conversion","useConversion","saving","setSaving","save","allKeys","props","requestBody","undefined","toISOString","map","sharedRowStyles","altRow","revoked","metaRow","join","title","toString","toLocaleDateString","revokeButton","onClick","keyRow","colSpan","reinstateButton","permissionsRow","betaPermissions","Object","entries","label","checked","updatePermissions","ProxyKeys","onLock","loading","setLoading","keys","setKeys","showRevokedKeys","setShowRevokedKeys","errorMessage","setErrorMessage","keysReloadedCount","setKeysReloadedCount","useEffect","error_message","activeKeys","useMemo","filter","revokedKeys","renderKeys","i","keyUpdated","href","lockAnchor","root","length","rel","Faq","question","answer","children","App","setUser","appContextValue","process","me","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df1506f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"metaRow\":\"ProxyKey_metaRow__3XHtm\",\"keyRow\":\"ProxyKey_keyRow__2qTzV\",\"permissionsRow\":\"ProxyKey_permissionsRow__2mp95\",\"betaPermissions\":\"ProxyKey_betaPermissions__2zDVc\",\"altRow\":\"ProxyKey_altRow__HnFTT\",\"revoked\":\"ProxyKey_revoked__2c3RM\",\"key\":\"ProxyKey_key__3ipTR\",\"revokedAt\":\"ProxyKey_revokedAt__1Oyv1\",\"revokeButton\":\"ProxyKey_revokeButton__1ibyz\",\"reinstateButton\":\"ProxyKey_reinstateButton__1X8g1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ProxyKeys_root__3mGzb\",\"lockAnchor\":\"ProxyKeys_lockAnchor__2X_eP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Faq_root__1paRV\",\"question\":\"Faq_question__1HaW1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__2CSG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrongKey\":\"TornKeyForm_wrongKey__1Xm6S\"};","import React from 'react';\nimport User from './interfaces/User';\n\nexport interface AppContextInterface {\n    serverBaseUrl: string,\n    user: User | null,\n}\n\nconst AppContext = React.createContext<AppContextInterface>({\n    serverBaseUrl: '',\n    user: null,\n});\n\nAppContext.displayName = 'AppContext';\n\nexport default AppContext;\n","import React, { FC, FormEvent, useContext, useState } from 'react';\nimport styles from './TornKeyForm.module.scss';\nimport AppContext from './AppContext';\nimport User from './interfaces/User';\n\ninterface Props {\n    onAuthenticated(user: User): void,\n}\n\nconst TornKeyForm: FC<Props> = ({ onAuthenticated }) => {\n    const app = useContext(AppContext);\n\n    const [tornKey, setTornKey] = useState('');\n    const [checking, setChecking] = useState(false);\n    const [lastCheckWasError, setLastCheckWasError] = useState(false);\n\n    const submit = async (event: FormEvent) => {\n        event.preventDefault();\n\n        setChecking(true);\n        setLastCheckWasError(false);\n\n        const response = await fetch(app.serverBaseUrl + '/api/authenticate', {\n            credentials: 'include',\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({key: tornKey}),\n        });\n\n        setChecking(false);\n\n        if (response.status === 200) {\n            const { id, name } = await response.json();\n            onAuthenticated({ id, name });\n        } else {\n            setLastCheckWasError(true);\n        }\n    }\n\n    return (\n        <form onSubmit={submit}>\n            <input className={lastCheckWasError ? styles.wrongKey : ''} type=\"text\" value={tornKey} onChange={(event) => setTornKey(event.target.value)} disabled={checking}/>\n            <input type=\"submit\" disabled={checking} value=\"Unlock\"/>\n            {checking && <span>checking...</span>}\n        </form>\n    )\n};\n\nexport default TornKeyForm;\n","import Key from '../interfaces/Key';\nimport KeyRecord from '../interfaces/KeyRecord';\n\nexport default () => {\n    return {\n        convertKeyRecordToEntity(record: KeyRecord): Key {\n            return {\n                key: record.key,\n                userId: record.user_id,\n                permissions: record.permissions,\n                description: record.description,\n                createdAt: new Date(record.created_at),\n                revokedAt: record.revoked_at ? new Date(record.revoked_at) : null,\n            };\n        }\n    }\n}\n","import React, { FC, useContext, useState } from 'react';\nimport Key from './interfaces/Key';\nimport styles from './ProxyKey.module.scss';\nimport AppContext from './AppContext';\nimport useConversion from './hooks/useConversion';\nimport PermissionString from './PermissionString';\nimport KeyRecord from './interfaces/KeyRecord';\n\ninterface Props {\n    keyEntity: Key\n    useAltStyle: boolean\n    onKeyUpdated(allKeys: Key[]): void\n}\n\nconst ProxyKey: FC<Props> = ({ keyEntity: key, useAltStyle, onKeyUpdated }) => {\n    const app = useContext(AppContext);\n    const conversion = useConversion();\n\n    const [saving, setSaving] = useState<boolean>(false);\n\n    async function revoke(event: React.MouseEvent) {\n        event.preventDefault();\n        const allKeys = await save({ revokedAt: new Date() });\n        onKeyUpdated(allKeys);\n    }\n\n    async function reinstate(event: React.MouseEvent) {\n        event.preventDefault();\n        const allKeys = await save({ revokedAt: null });\n        onKeyUpdated(allKeys);\n    }\n\n    async function updatePermissions(permissions: PermissionString) {\n        const allKeys = await save({ permissions });\n        onKeyUpdated(allKeys);\n    }\n\n    async function save(props: Partial<Key>): Promise<Key[]> {\n        const requestBody: Partial<KeyRecord> = {};\n\n        if (props.revokedAt !== undefined) {\n            requestBody.revoked_at = props.revokedAt?.toISOString() || null;\n        }\n        if (typeof props.permissions === 'string') {\n            requestBody.permissions = props.permissions;\n        }\n\n        setSaving(true);\n        const response = await fetch(`${app.serverBaseUrl}/api/keys/${key.key}`, {\n            method: 'put',\n            credentials: 'include',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(requestBody),\n        });\n\n        return (await response.json()).map(conversion.convertKeyRecordToEntity);\n    }\n\n    const sharedRowStyles = [\n        useAltStyle ? styles.altRow : '',\n        key.revokedAt ? styles.revoked : '',\n    ];\n\n    const permissionOptions = {\n        '*': 'Public+private',\n        'public': 'Public only',\n    };\n\n    return (\n        <>\n            <tr className={[...sharedRowStyles, styles.metaRow].join(' ')}>\n                <td>{key.description}</td>\n                <td><span title={key.createdAt.toString()}>{key.createdAt.toLocaleDateString()}</span></td>\n                <td>\n                    {key.revokedAt === null && (\n                        <button className={styles.revokeButton} onClick={revoke} disabled={saving}>revoke</button>\n                    )}\n                    {key.revokedAt !== null && (\n                        <span title={key.revokedAt.toString()} className={styles.revokedAt}>revoked at {key.revokedAt.toLocaleDateString()}</span>\n                    )}\n                </td>\n            </tr>\n            <tr className={[...sharedRowStyles, styles.keyRow].join(' ')}>\n                <td colSpan={key.revokedAt ? 2 : 3}>\n                    <span className={styles.key + ' ' + (key.revokedAt !== null ? styles.revoked : '')}>{key.key}</span>\n                </td>\n                {key.revokedAt !== null && (\n                    <td>\n                        <button className={styles.reinstateButton} onClick={reinstate} disabled={saving}>reinstate</button>\n                    </td>\n                )}\n            </tr>\n            <tr className={[...sharedRowStyles, styles.permissionsRow].join(' ')}>\n                <td colSpan={3}>\n                    <span className={styles.betaPermissions}>Permissions: </span>\n                    {Object.entries(permissionOptions).map(([value, label]) => (\n                        <label key={value}>\n                            <input\n                                disabled={saving}\n                                type=\"radio\"\n                                name={`permissions-${key.key}`}\n                                value={value}\n                                checked={key.permissions === value}\n                                onChange={() => updatePermissions(value as PermissionString)}\n                            />\n                            {label}\n                        </label>\n                    ))}\n                </td>\n            </tr>\n        </>\n    )\n};\n\nexport default ProxyKey;\n","import React, { FC, useContext, useEffect, useMemo, useState } from 'react';\nimport ProxyKey from './ProxyKey';\nimport AppContext from './AppContext';\nimport styles from './ProxyKeys.module.scss';\nimport Key from './interfaces/Key';\nimport useConversion from './hooks/useConversion';\n\ninterface Props {\n    onLock(): void\n}\n\nconst ProxyKeys: FC<Props> = ({ onLock }) => {\n    const app = useContext(AppContext);\n    const conversion = useConversion();\n\n    const [loading, setLoading] = useState(false);\n    const [keys, setKeys] = useState<Key[]>([]);\n    const [showRevokedKeys, setShowRevokedKeys] = useState<boolean>(false);\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const [keysReloadedCount, setKeysReloadedCount] = useState<number>(0);\n\n    useEffect(function loadKeys() {\n        setLoading(true);\n        (async () => {\n            const response = await fetch(app.serverBaseUrl + '/api/keys', { credentials: 'include' });\n\n            if (response.status === 200) {\n                const keys: Key[] = (await response.json()).map(conversion.convertKeyRecordToEntity);\n                setKeys(keys);\n            } else {\n                setErrorMessage((await response.json()).error_message || 'some error');\n            }\n\n            setLoading(false);\n        })();\n    }, []);\n\n    const activeKeys = useMemo(() => {\n        return keys.filter((key) => key.revokedAt === null);\n    }, [keys]);\n\n    const revokedKeys = useMemo(() => {\n        return keys.filter((key) => key.revokedAt !== null);\n    }, [keys]);\n\n    function lock(event: React.MouseEvent) {\n        event.preventDefault();\n        onLock();\n    }\n\n    function renderKeys(keys: Key[]) {\n        return keys.map((key, i) => (\n            <ProxyKey\n                key={keysReloadedCount + '_' + key.key}\n                keyEntity={key}\n                useAltStyle={i % 2 !== 0}\n                onKeyUpdated={keyUpdated}\n            />\n        ));\n    }\n\n    function keyUpdated(allKeys: Key[]) {\n        // By updating the keysReloadedCount (used as part of loop key), we achieve a re-render of the ProxyKey children.\n        // Without it, the `saving` state of the updated key would remain true, because somehow react applies an unwanted performance optimization despite reference UN-equality.\n        setKeysReloadedCount(keysReloadedCount + 1);\n        setKeys(allKeys);\n    }\n\n    if (errorMessage) {\n        return <span>Error response from server: {errorMessage}. Please refresh the page.</span>;\n    }\n\n    if (loading) {\n        return <span>Loading...</span>;\n    }\n\n    return (\n        <>\n            <p>Hello, {app.user?.name} [{app.user?.id}] <a href=\"#\" className={styles.lockAnchor} onClick={lock}>Lock</a></p>\n            <table className={styles.root}>\n                <thead>\n                <tr>\n                    <th>Description</th>\n                    <th>Created</th>\n                    <th>Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                {renderKeys(activeKeys)}\n                </tbody>\n                {revokedKeys.length > 0 && (\n                    <tbody>\n                    <tr>\n                        <td colSpan={3}>\n                            <label>\n                                <input type=\"checkbox\" checked={showRevokedKeys} onChange={(event) => setShowRevokedKeys(event.target.checked)}/>\n                                &nbsp;Show revoked keys ({revokedKeys.length})\n                            </label>\n                        </td>\n                    </tr>\n                    {showRevokedKeys && renderKeys(revokedKeys)}\n                    </tbody>\n                )}\n            </table>\n            <div>\n                <h3>New key? Nope!</h3>\n                <p>It is no longer possible to create new keys. The <a href=\"https://www.torn.com/forums.php#/p=threads&f=63&t=16178384\" target=\"_blank\" rel=\"noopener\">forum thread</a> explains why. Basically we're unable to guarantee service with the IP rate limit in place, and Ched isn't going to make any exceptions.</p>\n                <p>I recommend reverting to the use of TORN keys.</p>\n                <p>Existing keys will remain functional for a little while to ease the transition. But please switch back to TORN keys at your earliest convenience.</p>\n            </div>\n        </>\n    )\n};\n\nexport default ProxyKeys;\n","import React, { FC } from 'react';\nimport styles from './Faq.module.scss';\n\ninterface Props {\n    question: string\n    answer?: string\n}\n\nconst Faq: FC<Props> = ({ question, answer, children }) => {\n    return (\n        <div className={styles.root}>\n            <p className={styles.question}>{question}</p>\n            {answer && <p>{answer}</p>}\n            {!answer && children}\n        </div>\n    )\n}\n\nexport default Faq;\n","import React, { useEffect, useState } from 'react';\nimport styles from './App.module.scss';\nimport TornKeyForm from './TornKeyForm';\nimport ProxyKeys from './ProxyKeys';\nimport AppContext, { AppContextInterface } from './AppContext';\nimport Faq from './Faq';\nimport User from './interfaces/User';\n\nfunction App() {\n    const [user, setUser] = useState<User | null>(null);\n\n    const appContextValue: AppContextInterface = {\n        serverBaseUrl: process.env.REACT_APP_SERVER_BASE_URL!,\n        user,\n    };\n\n    useEffect(() => {\n        // Make a request that responds with a 200 only if the http-only jwt is still valid.\n        (async () => {\n            const response = await fetch(appContextValue.serverBaseUrl + '/api/me', { credentials: 'include' });\n            if (response.status === 200) {\n                const me: User = await response.json();\n                setUser(me);\n            }\n        })();\n    }, []);\n\n    const lock = () => {\n        setUser(null);\n        fetch(appContextValue.serverBaseUrl + '/api/lock', { credentials: 'include', method: 'post' });\n    };\n\n    return (\n        <AppContext.Provider value={appContextValue}>\n            <div className={styles.root}>\n                <h1>TORN proxy</h1>\n                <p>The only place that needs to know your TORN API key.</p>\n                <p>Apps can use dedicated proxy keys to make requests to the TORN API.</p>\n                <p>Easy app-based access control for added privacy and security.</p>\n\n                <h2>My proxy keys</h2>\n                {user === null && (\n                    <>\n                        <p>Locked. Enter your TORN API key first.</p>\n                        <TornKeyForm onAuthenticated={setUser}/>\n                    </>\n                )}\n                {user !== null && <ProxyKeys onLock={lock}/>}\n\n                {user === null && (\n                    <>\n                        <h2>We have a problem</h2>\n                        <Faq question=\"What's going on?\">\n                            Please use default TORN keys instead of proxy keys. We can't guarantee continued service because of TORN's API limits, mostly the IP-based one. Need more control? Then bug Ched until he finally gives in. Or <a href=\"https://www.torn.com/forums.php#/p=threads&f=4&t=16123202\" target=\"_blank\" rel=\"noopener\">vote and bump this</a>\n                        </Faq>\n                    </>\n                )}\n            </div>\n        </AppContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}