{"version":3,"sources":["ProxyKey.module.scss","ProxyKeys.module.scss","Faq.module.scss","App.module.scss","TornKeyForm.module.scss","AppContext.ts","TornKeyForm.tsx","hooks/useConversion.ts","ProxyKey.tsx","ProxyKeys.tsx","Faq.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppContext","React","createContext","serverBaseUrl","user","displayName","TornKeyForm","onAuthenticated","app","useContext","useState","tornKey","setTornKey","checking","setChecking","lastCheckWasError","setLastCheckWasError","submit","event","a","preventDefault","fetch","credentials","method","headers","body","JSON","stringify","key","response","status","json","id","name","onSubmit","className","styles","wrongKey","type","value","onChange","target","disabled","convertKeyRecordToEntity","record","userId","user_id","permissions","description","createdAt","Date","created_at","revokedAt","revoked_at","ProxyKey","keyEntity","useAltStyle","onKeyUpdated","conversion","useConversion","saving","setSaving","save","allKeys","props","requestBody","undefined","toISOString","map","sharedRowStyles","altRow","revoked","metaRow","join","title","toString","toLocaleDateString","revokeButton","onClick","keyRow","colSpan","reinstateButton","permissionsRow","betaPermissions","Object","entries","label","checked","updatePermissions","ProxyKeys","onLock","loading","setLoading","keys","setKeys","showRevokedKeys","setShowRevokedKeys","newKeyDescription","setNewKeyDescription","savingNewKey","setSavingNewKey","errorMessage","setErrorMessage","keysReloadedCount","setKeysReloadedCount","useEffect","error_message","activeKeys","useMemo","filter","revokedKeys","renderKeys","i","keyUpdated","href","lockAnchor","root","length","action","placeholder","Faq","question","answer","children","App","setUser","appContextValue","process","me","Provider","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.225154e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"metaRow\":\"ProxyKey_metaRow__2JeuK\",\"keyRow\":\"ProxyKey_keyRow__8puyP\",\"permissionsRow\":\"ProxyKey_permissionsRow__RGH2L\",\"betaPermissions\":\"ProxyKey_betaPermissions__2e8_X\",\"altRow\":\"ProxyKey_altRow__1oV-P\",\"revoked\":\"ProxyKey_revoked__2Rst7\",\"key\":\"ProxyKey_key__17jyI\",\"revokedAt\":\"ProxyKey_revokedAt__37SHF\",\"revokeButton\":\"ProxyKey_revokeButton__1ov-e\",\"reinstateButton\":\"ProxyKey_reinstateButton__2U8Sf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ProxyKeys_root__3D-FE\",\"lockAnchor\":\"ProxyKeys_lockAnchor__GIm2o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Faq_root__zfkZZ\",\"question\":\"Faq_question__1LI2v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__3JlSw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrongKey\":\"TornKeyForm_wrongKey__s2rQ-\"};","import React from 'react';\r\nimport User from './interfaces/User';\r\n\r\nexport interface AppContextInterface {\r\n    serverBaseUrl: string,\r\n    user: User | null,\r\n}\r\n\r\nconst AppContext = React.createContext<AppContextInterface>({\r\n    serverBaseUrl: '',\r\n    user: null,\r\n});\r\n\r\nAppContext.displayName = 'AppContext';\r\n\r\nexport default AppContext;\r\n","import React, { FC, FormEvent, useContext, useState } from 'react';\r\nimport styles from './TornKeyForm.module.scss';\r\nimport AppContext from './AppContext';\r\nimport User from './interfaces/User';\r\n\r\ninterface Props {\r\n    onAuthenticated(user: User): void,\r\n}\r\n\r\nconst TornKeyForm: FC<Props> = ({ onAuthenticated }) => {\r\n    const app = useContext(AppContext);\r\n\r\n    const [tornKey, setTornKey] = useState('');\r\n    const [checking, setChecking] = useState(false);\r\n    const [lastCheckWasError, setLastCheckWasError] = useState(false);\r\n\r\n    const submit = async (event: FormEvent) => {\r\n        event.preventDefault();\r\n\r\n        setChecking(true);\r\n        setLastCheckWasError(false);\r\n\r\n        const response = await fetch(app.serverBaseUrl + '/api/authenticate', {\r\n            credentials: 'include',\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({key: tornKey}),\r\n        });\r\n\r\n        setChecking(false);\r\n\r\n        if (response.status === 200) {\r\n            const { id, name } = await response.json();\r\n            onAuthenticated({ id, name });\r\n        } else {\r\n            setLastCheckWasError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            <input className={lastCheckWasError ? styles.wrongKey : ''} type=\"text\" value={tornKey} onChange={(event) => setTornKey(event.target.value)} disabled={checking}/>\r\n            <input type=\"submit\" disabled={checking} value=\"Unlock\"/>\r\n            {checking && <span>checking...</span>}\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default TornKeyForm;\r\n","import Key from '../interfaces/Key';\r\nimport KeyRecord from '../interfaces/KeyRecord';\r\n\r\nexport default () => {\r\n    return {\r\n        convertKeyRecordToEntity(record: KeyRecord): Key {\r\n            return {\r\n                key: record.key,\r\n                userId: record.user_id,\r\n                permissions: record.permissions,\r\n                description: record.description,\r\n                createdAt: new Date(record.created_at),\r\n                revokedAt: record.revoked_at ? new Date(record.revoked_at) : null,\r\n            };\r\n        }\r\n    }\r\n}\r\n","import React, { FC, useContext, useState } from 'react';\r\nimport Key from './interfaces/Key';\r\nimport styles from './ProxyKey.module.scss';\r\nimport AppContext from './AppContext';\r\nimport useConversion from './hooks/useConversion';\r\nimport PermissionString from './PermissionString';\r\nimport KeyRecord from './interfaces/KeyRecord';\r\n\r\ninterface Props {\r\n    keyEntity: Key\r\n    useAltStyle: boolean\r\n    onKeyUpdated(allKeys: Key[]): void\r\n}\r\n\r\nconst ProxyKey: FC<Props> = ({ keyEntity: key, useAltStyle, onKeyUpdated }) => {\r\n    const app = useContext(AppContext);\r\n    const conversion = useConversion();\r\n\r\n    const [saving, setSaving] = useState<boolean>(false);\r\n\r\n    async function revoke(event: React.MouseEvent) {\r\n        event.preventDefault();\r\n        const allKeys = await save({ revokedAt: new Date() });\r\n        onKeyUpdated(allKeys);\r\n    }\r\n\r\n    async function reinstate(event: React.MouseEvent) {\r\n        event.preventDefault();\r\n        const allKeys = await save({ revokedAt: null });\r\n        onKeyUpdated(allKeys);\r\n    }\r\n\r\n    async function updatePermissions(permissions: PermissionString) {\r\n        const allKeys = await save({ permissions });\r\n        onKeyUpdated(allKeys);\r\n    }\r\n\r\n    async function save(props: Partial<Key>): Promise<Key[]> {\r\n        const requestBody: Partial<KeyRecord> = {};\r\n\r\n        if (props.revokedAt !== undefined) {\r\n            requestBody.revoked_at = props.revokedAt?.toISOString() || null;\r\n        }\r\n        if (typeof props.permissions === 'string') {\r\n            requestBody.permissions = props.permissions;\r\n        }\r\n\r\n        setSaving(true);\r\n        const response = await fetch(`${app.serverBaseUrl}/api/keys/${key.key}`, {\r\n            method: 'put',\r\n            credentials: 'include',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(requestBody),\r\n        });\r\n\r\n        return (await response.json()).map(conversion.convertKeyRecordToEntity);\r\n    }\r\n\r\n    const sharedRowStyles = [\r\n        useAltStyle ? styles.altRow : '',\r\n        key.revokedAt ? styles.revoked : '',\r\n    ];\r\n\r\n    const permissionOptions = {\r\n        '*': 'Public+private',\r\n        'public': 'Public only',\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <tr className={[...sharedRowStyles, styles.metaRow].join(' ')}>\r\n                <td>{key.description}</td>\r\n                <td><span title={key.createdAt.toString()}>{key.createdAt.toLocaleDateString()}</span></td>\r\n                <td>\r\n                    {key.revokedAt === null && (\r\n                        <button className={styles.revokeButton} onClick={revoke} disabled={saving}>revoke</button>\r\n                    )}\r\n                    {key.revokedAt !== null && (\r\n                        <span title={key.revokedAt.toString()} className={styles.revokedAt}>revoked at {key.revokedAt.toLocaleDateString()}</span>\r\n                    )}\r\n                </td>\r\n            </tr>\r\n            <tr className={[...sharedRowStyles, styles.keyRow].join(' ')}>\r\n                <td colSpan={key.revokedAt ? 2 : 3}>\r\n                    <span className={styles.key + ' ' + (key.revokedAt !== null ? styles.revoked : '')}>{key.key}</span>\r\n                </td>\r\n                {key.revokedAt !== null && (\r\n                    <td>\r\n                        <button className={styles.reinstateButton} onClick={reinstate} disabled={saving}>reinstate</button>\r\n                    </td>\r\n                )}\r\n            </tr>\r\n            <tr className={[...sharedRowStyles, styles.permissionsRow].join(' ')}>\r\n                <td colSpan={3}>\r\n                    <span className={styles.betaPermissions}>BETA permissions:</span>\r\n                    {Object.entries(permissionOptions).map(([value, label]) => (\r\n                        <label key={value}>\r\n                            <input\r\n                                disabled={saving}\r\n                                type=\"radio\"\r\n                                name={`permissions-${key.key}`}\r\n                                value={value}\r\n                                checked={key.permissions === value}\r\n                                onChange={() => updatePermissions(value as PermissionString)}\r\n                            />\r\n                            {label}\r\n                        </label>\r\n                    ))}\r\n                </td>\r\n            </tr>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProxyKey;\r\n","import React, { FC, useContext, useEffect, useMemo, useState } from 'react';\r\nimport ProxyKey from './ProxyKey';\r\nimport AppContext from './AppContext';\r\nimport styles from './ProxyKeys.module.scss';\r\nimport Key from './interfaces/Key';\r\nimport useConversion from './hooks/useConversion';\r\n\r\ninterface Props {\r\n    onLock(): void\r\n}\r\n\r\nconst ProxyKeys: FC<Props> = ({ onLock }) => {\r\n    const app = useContext(AppContext);\r\n    const conversion = useConversion();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [keys, setKeys] = useState<Key[]>([]);\r\n    const [showRevokedKeys, setShowRevokedKeys] = useState<boolean>(false);\r\n    const [newKeyDescription, setNewKeyDescription] = useState<string>('');\r\n    const [savingNewKey, setSavingNewKey] = useState<boolean>(false);\r\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n    const [keysReloadedCount, setKeysReloadedCount] = useState<number>(0);\r\n\r\n    useEffect(function loadKeys() {\r\n        setLoading(true);\r\n        (async () => {\r\n            const response = await fetch(app.serverBaseUrl + '/api/keys', { credentials: 'include' });\r\n\r\n            if (response.status === 200) {\r\n                const keys: Key[] = (await response.json()).map(conversion.convertKeyRecordToEntity);\r\n                setKeys(keys);\r\n            } else {\r\n                setErrorMessage((await response.json()).error_message || 'some error');\r\n            }\r\n\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n    const activeKeys = useMemo(() => {\r\n        return keys.filter((key) => key.revokedAt === null);\r\n    }, [keys]);\r\n\r\n    const revokedKeys = useMemo(() => {\r\n        return keys.filter((key) => key.revokedAt !== null);\r\n    }, [keys]);\r\n\r\n    function lock(event: React.MouseEvent) {\r\n        event.preventDefault();\r\n        onLock();\r\n    }\r\n\r\n    async function createKey(event: React.FormEvent) {\r\n        event.preventDefault();\r\n\r\n        setSavingNewKey(true);\r\n        const response = await fetch(app.serverBaseUrl + '/api/keys', {\r\n            credentials: 'include',\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({ description: newKeyDescription }),\r\n        })\r\n        const keys = (await response.json()).map(conversion.convertKeyRecordToEntity);\r\n        setKeys(keys);\r\n\r\n        setNewKeyDescription('');\r\n        setSavingNewKey(false);\r\n    }\r\n\r\n    function renderKeys(keys: Key[]) {\r\n        return keys.map((key, i) => (\r\n            <ProxyKey\r\n                key={keysReloadedCount + '_' + key.key}\r\n                keyEntity={key}\r\n                useAltStyle={i % 2 !== 0}\r\n                onKeyUpdated={keyUpdated}\r\n            />\r\n        ));\r\n    }\r\n\r\n    function keyUpdated(allKeys: Key[]) {\r\n        // By updating the keysReloadedCount (used as part of loop key), we achieve a re-render of the ProxyKey children.\r\n        // Without it, the `saving` state of the updated key would remain true, because somehow react applies an unwanted performance optimization despite reference UN-equality.\r\n        setKeysReloadedCount(keysReloadedCount + 1);\r\n        setKeys(allKeys);\r\n    }\r\n\r\n    if (errorMessage) {\r\n        return <span>Error response from server: {errorMessage}. Please refresh the page.</span>;\r\n    }\r\n\r\n    if (loading) {\r\n        return <span>Loading...</span>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p>Hello, {app.user?.name} [{app.user?.id}] <a href=\"#\" className={styles.lockAnchor} onClick={lock}>Lock</a></p>\r\n            <table className={styles.root}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Description</th>\r\n                    <th>Created</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {renderKeys(activeKeys)}\r\n                </tbody>\r\n                {revokedKeys.length > 0 && (\r\n                    <tbody>\r\n                    <tr>\r\n                        <td colSpan={3}>\r\n                            <label>\r\n                                <input type=\"checkbox\" checked={showRevokedKeys} onChange={(event) => setShowRevokedKeys(event.target.checked)}/>\r\n                                &nbsp;Show revoked keys ({revokedKeys.length})\r\n                            </label>\r\n                        </td>\r\n                    </tr>\r\n                    {showRevokedKeys && renderKeys(revokedKeys)}\r\n                    </tbody>\r\n                )}\r\n            </table>\r\n            <div>\r\n                <h3>New key</h3>\r\n                <form action=\"\" onSubmit={createKey}>\r\n                    <input type=\"text\" placeholder=\"Description\" value={newKeyDescription} onChange={(event) => setNewKeyDescription(event.target.value)} disabled={savingNewKey}/>\r\n                    <input type=\"submit\" value=\"Create key\" disabled={savingNewKey}/>\r\n                    {savingNewKey && <span>creating key...</span>}\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProxyKeys;\r\n","import React, { FC } from 'react';\r\nimport styles from './Faq.module.scss';\r\n\r\ninterface Props {\r\n    question: string\r\n    answer?: string\r\n}\r\n\r\nconst Faq: FC<Props> = ({ question, answer, children }) => {\r\n    return (\r\n        <div className={styles.root}>\r\n            <p className={styles.question}>{question}</p>\r\n            {answer && <p>{answer}</p>}\r\n            {!answer && children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Faq;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styles from './App.module.scss';\r\nimport TornKeyForm from './TornKeyForm';\r\nimport ProxyKeys from './ProxyKeys';\r\nimport AppContext, { AppContextInterface } from './AppContext';\r\nimport Faq from './Faq';\r\nimport User from './interfaces/User';\r\n\r\nfunction App() {\r\n    const [user, setUser] = useState<User | null>(null);\r\n\r\n    const appContextValue: AppContextInterface = {\r\n        serverBaseUrl: process.env.REACT_APP_SERVER_BASE_URL!,\r\n        user,\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Make a request that responds with a 200 only if the http-only jwt is still valid.\r\n        (async () => {\r\n            const response = await fetch(appContextValue.serverBaseUrl + '/api/me', { credentials: 'include' });\r\n            if (response.status === 200) {\r\n                const me: User = await response.json();\r\n                setUser(me);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    const lock = () => {\r\n        setUser(null);\r\n        fetch(appContextValue.serverBaseUrl + '/api/lock', { credentials: 'include', method: 'post' });\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider value={appContextValue}>\r\n            <div className={styles.root}>\r\n                <h1>TORN proxy</h1>\r\n                <p>The only place that needs to know your TORN API key.</p>\r\n                <p>Apps can use dedicated proxy keys to make requests to the TORN API.</p>\r\n                <p>Easy app-based access control for added privacy and security.</p>\r\n\r\n                <h2>My proxy keys</h2>\r\n                {user === null && (\r\n                    <>\r\n                        <p>Locked. Enter your TORN API key first.</p>\r\n                        <TornKeyForm onAuthenticated={setUser}/>\r\n                    </>\r\n                )}\r\n                {user !== null && <ProxyKeys onLock={lock}/>}\r\n\r\n                {user === null && (\r\n                    <>\r\n                        <h2>FAQ</h2>\r\n                        <Faq question=\"Why?\" answer=\"TORN is not going to support multiple API keys. We feel privacy should be top of mind for everyone.\"/>\r\n                        <Faq question=\"Okay, but how?\" answer=\"Instead of giving out your single TORN API key to apps, you create a new proxy key and use that instead. Want to stop using said app? Then simply revoke the key and the app will longer have access. No more need to reset your TORN API key.\"/>\r\n                        <Faq question=\"Why trust you?\">\r\n                            <p>I highly value security and privacy. Ched's rejection of my <a href=\"https://www.torn.com/forums.php#/p=threads&f=19&t=16177140\" target=\"_blank\" rel=\"noopener noreferrer\">[100R+] API keys suggestion</a> triggered this proxy idea. If you're an ArsonWarehouse user, I already have your TORN API key. I never have, and never will, abuse it. Better to trust a single party than a whole range of apps and sites.</p>\r\n                        </Faq>\r\n                        <Faq question=\"Okay, but what about leaks?\" answer=\"Your TORN key is encrypted before it's stored. If the database is ever accessed by a third party, they can see your proxy keys but not your TORN key. If ever does leak I'll be transparent about it so you can take action.\"/>\r\n                        <Faq question=\"Why are proxy keys not encrypted?\" answer=\"To keep the proxy service as fast as possible. With every request, I need to look up the TORN key that belongs to the given proxy key and forward the request to TORN. I need to be able to efficiently query the proxy keys table.\"/>\r\n                        <Faq question=\"Roadmap?\" answer=\"I plan on adding permissions. Simple ones at first, separating public from private data. That way, apps can use your key to fetch market info but not sensitive data such as battle stats.\"/>\r\n                        <Faq question=\"I'm a developer, how do I implement this?\">\r\n                            Check out the <a href=\"https://github.com/sulsay/torn-proxy\" target=\"_blank\" rel=\"noopener noreferrer\">source code</a> and the readme.md in the root for instructions.\r\n                        </Faq>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </AppContext.Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}